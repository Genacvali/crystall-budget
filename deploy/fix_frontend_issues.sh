#!/bin/bash
set -e

echo "üé® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –í–ï–†–°–¢–ö–û–ô –ò FRONTEND"

APP_DIR="/opt/crystalbudget/crystall-budget"
SERVICE_NAME="crystalbudget"

if [ "$EUID" -ne 0 ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–∫ root –∏–ª–∏ —Å sudo"
    exit 1
fi

cd $APP_DIR

echo "üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞..."
systemctl stop $SERVICE_NAME

echo "üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞..."
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º base.html - –∏—Å–ø–æ–ª—å–∑—É–µ–º CDN –¥–ª—è –≤—Å–µ–≥–æ
cat > app/templates/base.html << 'EOF'
<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{% block title %}CrystalBudget{% endblock %}</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->  
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    body { background-color: #f6f7f9; }
    .navbar-brand { font-weight: 600; }
    .modern-card { border: 1px solid #e9ecef; border-radius: .75rem; background: #fff; }
    .card-grid { display: grid; gap: 1rem; grid-template-columns: repeat(auto-fill,minmax(240px,1fr)); }
    .container { max-width: 1100px; }
  </style>
</head>
<body>
  <nav class="navbar navbar-dark bg-dark">
    <div class="container">
      <a class="navbar-brand" href="/">üíé CrystalBudget</a>
      <div class="d-flex gap-2 align-items-center">
        {% if session.get('user_id') %}
          <!-- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –≤–∞–ª—é—Ç –±–µ–∑ AJAX -->
          <form class="d-flex align-items-center gap-1" method="post" action="/auth/set-currency">
            <select class="form-select form-select-sm" name="currency" onchange="this.form.submit()">
              {% for code, info in currencies.items() %}
                <option value="{{ code }}" {% if code==currency_code %}selected{% endif %}>{{ info.label }} ({{ info.symbol }})</option>
              {% endfor %}
            </select>
          </form>

          <a class="btn btn-sm btn-outline-light" href="/">–î–∞—à–±–æ—Ä–¥</a>
          <a class="btn btn-sm btn-outline-light" href="/expenses">–¢—Ä–∞—Ç—ã</a>
          <a class="btn btn-sm btn-outline-light" href="/categories">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</a>
          <a class="btn btn-sm btn-outline-light" href="/income">–î–æ—Ö–æ–¥—ã</a>
          <a class="btn btn-sm btn-outline-warning" href="/sources">–ò—Å—Ç–æ—á–Ω–∏–∫–∏</a>
          <a class="btn btn-sm btn-warning" href="/auth/logout">–í—ã–π—Ç–∏</a>
        {% else %}
          <a class="btn btn-sm btn-outline-light" href="/auth/login">–í–æ–π—Ç–∏</a>
          <a class="btn btn-sm btn-primary" href="/auth/register">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
        {% endif %}
      </div>
    </div>
  </nav>
  <div class="container my-4">
    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        {% for cat, msg in messages %}
          <div class="alert alert-{{ 'danger' if cat=='error' else cat }} alert-dismissible fade show" role="alert">
            {{ msg }}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>
        {% endfor %}
      {% endif %}
    {% endwith %}
    {% block content %}{% endblock %}
  </div>
  
  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤–∞–ª—é—Ç –±–µ–∑ API -->
  <script>
    console.log('CrystalBudget –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
      
      // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
      document.querySelectorAll('[onclick*="confirm"]').forEach(function(btn) {
        btn.addEventListener('click', function(e) {
          if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã?')) {
            e.preventDefault();
            return false;
          }
        });
      });
    });
  </script>
  
  {% block scripts %}{% endblock %}
</body>
</html>
EOF

echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω"

echo "üîÑ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç..."
# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∫—É—Ä—Å–æ–≤
cat > app/services/currency_simple.py << 'EOF'
"""–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –≤–∞–ª—é—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API."""

from flask import session

CURRENCIES = {
    "RUB": {"symbol": "‚ÇΩ", "label": "–†—É–±–ª—å"},
    "USD": {"symbol": "$", "label": "–î–æ–ª–ª–∞—Ä"}, 
    "EUR": {"symbol": "‚Ç¨", "label": "–ï–≤—Ä–æ"},
}
DEFAULT_CURRENCY = "RUB"

def inject_currency():
    """Context processor –¥–ª—è –≤–∞–ª—é—Ç."""
    code = session.get("currency", DEFAULT_CURRENCY)
    info = CURRENCIES.get(code, CURRENCIES[DEFAULT_CURRENCY])
    return dict(currency_code=code, currency_symbol=info["symbol"], currencies=CURRENCIES)

def get_exchange_rate(frm: str, to: str) -> float:
    """–ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã."""
    if frm == to:
        return 1.0
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
    rates = {
        "USD_RUB": 90.0,
        "EUR_RUB": 100.0,
        "RUB_USD": 0.011,
        "RUB_EUR": 0.010,
        "USD_EUR": 0.85,
        "EUR_USD": 1.18,
    }
    
    key = f"{frm}_{to}"
    return rates.get(key, 1.0)

def convert_currency(amount, from_currency, to_currency):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç."""
    if from_currency == to_currency:
        return amount
    
    rate = get_exchange_rate(from_currency, to_currency)
    return float(amount) * rate
EOF

echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∞–ª—é—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"

echo "üîÑ –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ API exchange..."
# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É API
cat > app/api/exchange_simple.py << 'EOF'
"""–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è API –∫—É—Ä—Å–æ–≤."""
from flask import Blueprint, jsonify
from ..blueprints.auth.decorators import login_required

bp = Blueprint('exchange', __name__)

@bp.route('/convert')
@login_required
def api_convert():
    return {"ok": True, "message": "Currency conversion temporarily disabled"}

@bp.route('/exchange-rates')
@login_required 
def get_exchange_rates():
    return {
        "ok": True, 
        "rates": {
            "USD_RUB": 90.0,
            "EUR_RUB": 100.0,
            "RUB_USD": 0.011,
            "RUB_EUR": 0.010,
        }
    }
EOF

echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è API"

echo "üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∑–∞–º–µ–Ω–∞..."
# –ë—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ -f "app/services/currency.py" ]; then
    cp app/services/currency.py app/services/currency_original.py.backup
    cp app/services/currency_simple.py app/services/currency.py
fi

if [ -f "app/api/exchange.py" ]; then
    cp app/api/exchange.py app/api/exchange_original.py.backup  
    cp app/api/exchange_simple.py app/api/exchange.py
fi

echo "üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chown -R crystal:crystal $APP_DIR

echo "üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞..."
systemctl start $SERVICE_NAME

# –ü—Ä–æ–≤–µ—Ä–∫–∞
sleep 3
if systemctl is-active --quiet $SERVICE_NAME; then
    echo "‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω"
    
    # HTTP —Ç–µ—Å—Ç
    if curl -s -f http://localhost:5000 > /dev/null 2>&1; then
        echo "‚úÖ HTTP —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        echo "‚ö†Ô∏è  HTTP —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª"
    fi
else
    echo "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è"
    journalctl -u $SERVICE_NAME --no-pager -l --since "1 minute ago"
fi

echo ""
echo "üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
echo "üìã –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:"
echo "  ‚úÖ CSS/JS –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å CDN"  
echo "  ‚úÖ –£–ø—Ä–æ—â–µ–Ω—ã –≤–∞–ª—é—Ç–Ω—ã–µ –∫—É—Ä—Å—ã"
echo "  ‚úÖ –ë–∞–∑–æ–≤—ã–π JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç"
echo "  ‚úÖ –§–æ—Ä–º—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ–±—ã—á–Ω—ã–º POST"
echo ""
echo "‚ö†Ô∏è  –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã:"
echo "  ‚Ä¢ –ñ–∏–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç"
echo "  ‚Ä¢ –°–ª–æ–∂–Ω—ã–µ API –∫—É—Ä—Å–æ–≤"
echo ""
echo "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ"