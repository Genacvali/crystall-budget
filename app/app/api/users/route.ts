import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db';
import { hashPassword, validateEmail, validatePassword } from '@/lib/security';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { email, password, householdName } = body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!email || !password) {
      return NextResponse.json(
        { error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    if (!validateEmail(email)) {
      return NextResponse.json(
        { error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' },
        { status: 400 }
      );
    }

    const passwordValidation = validatePassword(password);
    if (!passwordValidation.isValid) {
      return NextResponse.json(
        { error: passwordValidation.errors[0] },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await prisma.user.findUnique({
      where: { email: email.toLowerCase() }
    });

    if (existingUser) {
      return NextResponse.json(
        { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 400 }
      );
    }

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const passwordHash = await hashPassword(password);

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ–º –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const result = await prisma.$transaction(async (tx) => {
      // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await tx.user.create({
        data: {
          email: email.toLowerCase(),
          passwordHash,
        }
      });

      // –°–æ–∑–¥–∞—ë–º –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–æ
      const household = await tx.household.create({
        data: {
          name: householdName || '–°–µ–º—å—è',
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞
      await tx.householdMember.create({
        data: {
          userId: user.id,
          householdId: household.id,
          role: 'OWNER',
        }
      });

      // –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categories = [
        { name: '–ü—Ä–æ–¥—É–∫—Ç—ã', icon: 'üõí', color: '#ef4444' },
        { name: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöó', color: '#3b82f6' },
        { name: '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', icon: 'üé¨', color: '#8b5cf6' },
        { name: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: 'üè•', color: '#22c55e' },
        { name: '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', icon: 'üìö', color: '#f59e0b' },
        { name: '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ', icon: 'üè†', color: '#06b6d4' },
        { name: '–û–¥–µ–∂–¥–∞', icon: 'üëï', color: '#ec4899' },
        { name: '–ü—Ä–æ—á–µ–µ', icon: 'üí∞', color: '#6b7280' },
      ];

      for (const category of categories) {
        await tx.category.create({
          data: {
            ...category,
            householdId: household.id,
          }
        });
      }

      // –û—Å–Ω–æ–≤–Ω–æ–π —Å—á—ë—Ç –Ω–µ —Å–æ–∑–¥–∞—ë–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—É—é —Å—Ö–µ–º—É –±–µ–∑ –º–æ–¥–µ–ª–∏ Account

      return { user, household };
    });

    return NextResponse.json({
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      userId: result.user.id,
      householdId: result.household.id,
    });

  } catch (error) {
    console.error('Registration error:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}