datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL") // file:./data/crystall.db
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())
  households    HouseholdMember[]
  categories    Category[]
  accounts      Account[]
  transactions  Transaction[]
}

model Household {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  members     HouseholdMember[]
  budgets     Budget[]
  categories  Category[]
}

model HouseholdMember {
  id           String   @id @default(cuid())
  householdId  String
  userId       String
  role         String   @default("MEMBER") // OWNER | MEMBER
  joinedAt     DateTime @default(now())

  household Household @relation(fields: [householdId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@unique([householdId, userId])
}

model Budget {
  id            String   @id @default(cuid())
  householdId   String
  periodStart   DateTime
  nextStart     DateTime
  incomePlanned Int      @default(0)
  incomeActual  Int      @default(0)
  carryIn       Int      @default(0)
  allocations   Allocation[]
  createdAt     DateTime @default(now())

  household Household @relation(fields: [householdId], references: [id])

  @@unique([householdId, periodStart])
}

model Category {
  id           String   @id @default(cuid())
  householdId  String
  name         String
  icon         String?
  isHidden     Boolean  @default(false)

  household    Household @relation(fields: [householdId], references: [id])
  allocations  Allocation[]
  transactions Transaction[]

  @@unique([householdId, name])
}

model Allocation {
  id          String   @id @default(cuid())
  budgetId    String
  categoryId  String
  type        String   // "FIXED" | "PERCENT"
  amount      Int?     // если FIXED (в копейках)
  percent     Float?   // если PERCENT (0..100)
  rollover    String   @default("SAME_CATEGORY") // SAME_CATEGORY | TO_RESERVE | NONE
  planned     Int      @default(0)
  spent       Int      @default(0)
  carryOut    Int      @default(0)

  budget   Budget   @relation(fields: [budgetId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([budgetId, categoryId])
}

model Account {
  id           String   @id @default(cuid())
  householdId  String
  name         String
  currency     String   @default("RUB") // только RUB сейчас
  balance      Int      @default(0)

  household    Household   @relation(fields: [householdId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id          String   @id @default(cuid())
  householdId String
  userId      String?
  accountId   String?
  categoryId  String?
  budgetId    String?
  amount      Int      // расход < 0, доход > 0 (в копейках)
  occurredAt  DateTime
  note        String?
  isPending   Boolean  @default(false)

  household Household @relation(fields: [householdId], references: [id])
  user      User?     @relation(fields: [userId], references: [id])
  account   Account?  @relation(fields: [accountId], references: [id])
  category  Category? @relation(fields: [categoryId], references: [id])
  budget    Budget?   @relation(fields: [budgetId], references: [id])

  @@index([householdId, occurredAt])
}
