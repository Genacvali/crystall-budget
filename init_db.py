#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CrystalBudget

–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ - —Å–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω –±–ª–∞–≥–æ–¥–∞—Ä—è IF NOT EXISTS.
"""

import sqlite3
import sys
import os
from datetime import datetime

# –ü—É—Ç—å –∫ –ë–î (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
DB_PATH = os.environ.get("BUDGET_DB", "budget.db")

def create_database():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print(f"üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.executescript("""
            PRAGMA foreign_keys = ON;
            
            -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                name TEXT NOT NULL,
                password_hash TEXT NOT NULL,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP,
                timezone TEXT DEFAULT 'UTC',
                locale TEXT DEFAULT 'ru',
                default_currency TEXT DEFAULT 'RUB',
                currency TEXT DEFAULT 'RUB',
                theme TEXT DEFAULT 'light',
                avatar_path TEXT
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—é–¥–∂–µ—Ç–∞
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                name TEXT NOT NULL,
                limit_type TEXT NOT NULL CHECK(limit_type IN ('fixed','percent')),
                value REAL NOT NULL,
                currency TEXT DEFAULT 'RUB',
                category_type TEXT DEFAULT 'expense' CHECK(category_type IN ('expense','income'))
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–æ—Ö–æ–¥–æ–≤
            CREATE TABLE IF NOT EXISTS income_daily (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                date TEXT NOT NULL,
                amount REAL NOT NULL,
                source_id INTEGER REFERENCES income_sources(id),
                currency TEXT DEFAULT 'RUB'
            );

            -- –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Ö–æ–¥–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            CREATE TABLE IF NOT EXISTS income (
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                month TEXT NOT NULL,
                amount REAL NOT NULL
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                date TEXT NOT NULL,
                month TEXT NOT NULL,
                category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
                amount REAL NOT NULL,
                note TEXT,
                currency TEXT DEFAULT 'RUB'
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞
            CREATE TABLE IF NOT EXISTS income_sources (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                name TEXT NOT NULL,
                is_default INTEGER NOT NULL DEFAULT 0,
                UNIQUE(user_id, name)
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            CREATE TABLE IF NOT EXISTS source_category_rules (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                source_id INTEGER NOT NULL REFERENCES income_sources(id) ON DELETE CASCADE,
                category_id INTEGER NOT NULL REFERENCES categories(id) ON DELETE CASCADE,
                priority INTEGER NOT NULL DEFAULT 100,
                allocation_percent REAL NOT NULL DEFAULT 0.0,
                UNIQUE(user_id, source_id, category_id)
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–π –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
            CREATE TABLE IF NOT EXISTS savings_goals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                name TEXT NOT NULL,
                target_amount DECIMAL(10,2) NOT NULL,
                current_amount DECIMAL(10,2) DEFAULT 0,
                target_date TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP NULL
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —Å–µ–º–µ–π–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤
            CREATE TABLE IF NOT EXISTS shared_budgets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                creator_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                invite_code TEXT UNIQUE NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–º–µ–π–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤
            CREATE TABLE IF NOT EXISTS shared_budget_members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                shared_budget_id INTEGER NOT NULL REFERENCES shared_budgets(id) ON DELETE CASCADE,
                user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                role TEXT DEFAULT 'member',
                joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(shared_budget_id, user_id)
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
            CREATE TABLE IF NOT EXISTS exchange_rates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                from_currency TEXT NOT NULL,
                to_currency TEXT NOT NULL,
                rate DECIMAL(10,6) NOT NULL,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(from_currency, to_currency)
            );

            -- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            CREATE INDEX IF NOT EXISTS idx_expenses_user_month ON expenses(user_id, month);
            CREATE INDEX IF NOT EXISTS idx_expenses_category ON expenses(category_id);
            CREATE INDEX IF NOT EXISTS idx_categories_user ON categories(user_id);
            CREATE INDEX IF NOT EXISTS idx_income_daily_user_date ON income_daily(user_id, date);
            CREATE INDEX IF NOT EXISTS idx_savings_goals_user ON savings_goals(user_id);
            CREATE INDEX IF NOT EXISTS idx_shared_budget_members_budget ON shared_budget_members(shared_budget_id);
            CREATE INDEX IF NOT EXISTS idx_shared_budget_members_user ON shared_budget_members(user_id);
            CREATE INDEX IF NOT EXISTS idx_exchange_rates_currencies ON exchange_rates(from_currency, to_currency);
        """)
        
        conn.commit()
        conn.close()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_default_categories(user_id, conn):
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    default_categories = [
        ("–ü—Ä–æ–¥—É–∫—Ç—ã", "percent", 30.0, "RUB"),
        ("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "fixed", 5000.0, "RUB"),
        ("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "percent", 15.0, "RUB"),
        ("–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ", "fixed", 8000.0, "RUB"),
        ("–ó–¥–æ—Ä–æ–≤—å–µ", "fixed", 3000.0, "RUB"),
        ("–û–¥–µ–∂–¥–∞", "percent", 10.0, "RUB"),
    ]
    
    cursor = conn.cursor()
    for name, limit_type, value, currency in default_categories:
        cursor.execute("""
            INSERT OR IGNORE INTO categories (user_id, name, limit_type, value, currency)
            VALUES (?, ?, ?, ?, ?)
        """, (user_id, name, limit_type, value, currency))
    
    conn.commit()

def add_demo_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    response = input("–î–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (y/N): ").lower()
    if response != 'y':
        return
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from werkzeug.security import generate_password_hash
        demo_email = "demo@crystalbudget.ru"
        demo_password = generate_password_hash("demo123")
        
        cursor.execute("""
            INSERT OR IGNORE INTO users (email, name, password_hash)
            VALUES (?, ?, ?)
        """, (demo_email, "–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", demo_password))
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT id FROM users WHERE email = ?", (demo_email,))
        user_row = cursor.fetchone()
        if user_row:
            user_id = user_row[0]
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            create_default_categories(user_id, conn)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Ö–æ–¥
            current_month = datetime.now().strftime("%Y-%m")
            cursor.execute("""
                INSERT OR IGNORE INTO income (user_id, month, amount)
                VALUES (?, ?, ?)
            """, (user_id, current_month, 100000.0))
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {demo_email} / demo123")
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not os.path.exists(DB_PATH):
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name IN (
                'users', 'categories', 'expenses', 'income_daily', 
                'savings_goals', 'shared_budgets'
            )
        """)
        
        tables = [row[0] for row in cursor.fetchall()]
        expected_tables = ['users', 'categories', 'expenses', 'income_daily', 'savings_goals', 'shared_budgets']
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(tables)}")
        
        missing_tables = set(expected_tables) - set(tables)
        if missing_tables:
            print(f"‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")
        
        conn.close()
        return True
        
    except sqlite3.Error as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üèóÔ∏è  CrystalBudget - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if check_database():
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        response = input("–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã? (y/N): ").lower()
        if response != 'y':
            print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            return
    
    # –°–æ–∑–¥–∞–µ–º –ë–î
    if not create_database():
        sys.exit(1)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
    add_demo_data()
    
    print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {os.path.abspath(DB_PATH)}")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   python app.py")

if __name__ == "__main__":
    main()