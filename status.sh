#!/usr/bin/env bash
set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

check_service() {
    local service_name=$1
    local display_name=$2
    
    printf "%-20s " "${display_name}:"
    
    if systemctl is-active --quiet "${service_name}"; then
        echo -e "${GREEN}‚úì –∞–∫—Ç–∏–≤–µ–Ω${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        case "${service_name}" in
            "crystall-api")
                local pid=$(systemctl show -p MainPID --value crystall-api)
                if [[ "${pid}" != "0" ]]; then
                    echo -e "  ${CYAN}PID: ${pid}${NC}"
                fi
                ;;
            "crystall-web")
                local pid=$(systemctl show -p MainPID --value crystall-web)
                if [[ "${pid}" != "0" ]]; then
                    echo -e "  ${CYAN}PID: ${pid}${NC}"
                fi
                ;;
        esac
    else
        echo -e "${RED}‚úó –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        local failed_state=$(systemctl is-failed "${service_name}" 2>/dev/null || echo "inactive")
        if [[ "${failed_state}" == "failed" ]]; then
            echo -e "  ${RED}–°—Ç–∞—Ç—É—Å: failed${NC}"
        fi
    fi
}

check_ports() {
    echo -e "${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ ===${NC}"
    
    for port in 3000 4000 80 443; do
        printf "%-10s " "–ü–æ—Ä—Ç ${port}:"
        
        if nc -z 127.0.0.1 "${port}" 2>/dev/null; then
            echo -e "${GREEN}‚úì –¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç
            local pid=$(lsof -ti:${port} 2>/dev/null || echo "")
            if [[ -n "${pid}" ]]; then
                local process=$(ps -p ${pid} -o comm= 2>/dev/null || echo "unknown")
                echo -e "  ${CYAN}–ü—Ä–æ—Ü–µ—Å—Å: ${process} (PID: ${pid})${NC}"
            fi
        else
            echo -e "${RED}‚úó –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω${NC}"
        fi
    done
}

check_api_health() {
    echo -e "\n${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ API ===${NC}"
    
    printf "API Health: "
    if curl -s --max-time 5 http://127.0.0.1:4000/api/health &>/dev/null; then
        echo -e "${GREEN}‚úì API –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
        local response=$(curl -s --max-time 5 http://127.0.0.1:4000/api/health || echo "{}")
        echo -e "  ${CYAN}–û—Ç–≤–µ—Ç: ${response}${NC}"
    else
        echo -e "${RED}‚úó API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
    fi
}

check_database() {
    echo -e "\n${BLUE}=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===${NC}"
    
    printf "PostgreSQL: "
    if systemctl is-active --quiet postgresql; then
        echo -e "${GREEN}‚úì –∞–∫—Ç–∏–≤–µ–Ω${NC}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
        printf "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: "
        if sudo -u postgres psql -d crystall -c "SELECT version();" &>/dev/null; then
            echo -e "${GREEN}‚úì —É—Å–ø–µ—à–Ω–æ${NC}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            local tables=$(sudo -u postgres psql -d crystall -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")
            echo -e "  ${CYAN}–¢–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: ${tables}${NC}"
        else
            echo -e "${RED}‚úó –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è${NC}"
        fi
    else
        echo -e "${RED}‚úó –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω${NC}"
    fi
}

check_disk_space() {
    echo -e "\n${BLUE}=== –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ ===${NC}"
    
    local usage=$(df -h /data/crystall-budget 2>/dev/null | awk 'NR==2 {print $5}' || echo "N/A")
    local available=$(df -h /data/crystall-budget 2>/dev/null | awk 'NR==2 {print $4}' || echo "N/A")
    
    echo -e "–ü—Ä–æ–µ–∫—Ç: ${CYAN}${usage} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ, ${available} –¥–æ—Å—Ç—É–ø–Ω–æ${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤
    local log_size=$(du -sh /var/log/journal/ 2>/dev/null | awk '{print $1}' || echo "N/A")
    echo -e "–õ–æ–≥–∏: ${CYAN}${log_size}${NC}"
}

show_urls() {
    echo -e "\n${BLUE}=== URLs ===${NC}"
    
    local external_ip=$(curl -s --max-time 5 ifconfig.me 2>/dev/null || echo "unknown")
    
    if [[ "${external_ip}" != "unknown" ]]; then
        local domain="crystallbudget.${external_ip//./-}.sslip.io"
        echo -e "üåê Public:  ${CYAN}https://${domain}${NC}"
    fi
    
    echo -e "üè† API:     ${CYAN}http://127.0.0.1:4000/api/health${NC}"
    echo -e "üñ•Ô∏è  Web:     ${CYAN}http://127.0.0.1:3000${NC}"
}

main() {
    echo -e "${BLUE}"
    echo "=========================================="
    echo "      CrystallBudget Status Check"
    echo "=========================================="
    echo -e "${NC}"
    
    echo -e "${BLUE}=== –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ ===${NC}"
    check_service "postgresql" "PostgreSQL"
    check_service "crystall-api" "API —Å–µ—Ä–≤–µ—Ä"
    check_service "crystall-web" "Web —Å–µ—Ä–≤–µ—Ä"  
    check_service "caddy" "Caddy –ø—Ä–æ–∫—Å–∏"
    
    check_ports
    check_api_health
    check_database
    check_disk_space
    show_urls
    
    echo -e "\n${BLUE}=== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ===${NC}"
    echo "  sudo ./start.sh    - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  sudo ./stop.sh     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  sudo ./logs.sh     - –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  sudo ./deploy.sh   - –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    
    echo
}

main "$@"