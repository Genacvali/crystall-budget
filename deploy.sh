#!/bin/bash
# CrystallBudget - –ë—ã—Å—Ç—Ä—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ CentOS 9
set -euo pipefail

echo "üíé CrystallBudget - –î–µ–ø–ª–æ–π –Ω–∞ CentOS 9"
echo "======================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env
if [ ! -f ".env" ]; then
    log_warning ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞—é –∏–∑ –ø—Ä–∏–º–µ—Ä–∞..."
    cp .env.example .env
    log_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
    echo ""
    echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å:"
    echo "  HOSTNAME=–≤–∞—à-ip.sslip.io"
    echo "  NEXTAUTH_URL=https://–≤–∞—à-ip.sslip.io"
    echo "  NEXTAUTH_SECRET=—Å–ª—É—á–∞–π–Ω–∞—è-—Å—Ç—Ä–æ–∫–∞-32-—Å–∏–º–≤–æ–ª–∞"
    echo "  POSTGRES_PASSWORD=–±–µ–∑–æ–ø–∞—Å–Ω—ã–π-–ø–∞—Ä–æ–ª—å"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ Docker Compose"
    exit 1
fi

if ! docker compose version &> /dev/null; then
    if ! docker-compose version &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        exit 1
    else
        COMPOSE_CMD="docker-compose"
    fi
else
    COMPOSE_CMD="docker compose"
fi

log_success "Docker –≥–æ—Ç–æ–≤ (–∫–æ–º–∞–Ω–¥–∞: $COMPOSE_CMD)"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
if ss -tulpn | grep -q ":80 "; then
    log_warning "–ü–æ—Ä—Ç 80 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
    ss -tulpn | grep ":80 "
fi

if ss -tulpn | grep -q ":443 "; then
    log_warning "–ü–æ—Ä—Ç 443 —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
    ss -tulpn | grep ":443 "
fi

# –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
SERVER_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || echo "unknown")
log_info "IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: $SERVER_IP"

if [ "$SERVER_IP" != "unknown" ]; then
    SUGGESTED_HOST=$(echo $SERVER_IP | sed 's/\./-/g').sslip.io
    log_info "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π HOSTNAME: $SUGGESTED_HOST"
fi

# –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
CURRENT_HOSTNAME=$(grep "^HOSTNAME=" .env | cut -d'=' -f2 || echo "")
log_info "–¢–µ–∫—É—â–∏–π HOSTNAME –≤ .env: $CURRENT_HOSTNAME"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ firewall
log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ firewall..."
if systemctl is-active --quiet firewalld; then
    if ! firewall-cmd --list-ports | grep -q "80/tcp"; then
        log_warning "–ü–æ—Ä—Ç 80 –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ firewall"
        read -p "–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç 80? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo firewall-cmd --permanent --add-port=80/tcp
            sudo firewall-cmd --reload
            log_success "–ü–æ—Ä—Ç 80 –æ—Ç–∫—Ä—ã—Ç"
        fi
    fi
    
    if ! firewall-cmd --list-ports | grep -q "443/tcp"; then
        log_warning "–ü–æ—Ä—Ç 443 –Ω–µ –æ—Ç–∫—Ä—ã—Ç –≤ firewall"
        read -p "–û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç 443? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            sudo firewall-cmd --permanent --add-port=443/tcp
            sudo firewall-cmd --reload
            log_success "–ü–æ—Ä—Ç 443 –æ—Ç–∫—Ä—ã—Ç"
        fi
    fi
else
    log_info "Firewalld –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
log_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö..."
sudo mkdir -p /data/postgres /data/caddy_data /data/caddy_config
sudo chown -R $USER:$USER /data/ 2>/dev/null || true

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
$COMPOSE_CMD down 2>/dev/null || true

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫
log_info "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
$COMPOSE_CMD build --no-cache app

log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
$COMPOSE_CMD up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

echo -n "PostgreSQL: "
for i in {1..30}; do
    if $COMPOSE_CMD exec -T db pg_isready -U $(grep POSTGRES_USER .env | cut -d'=' -f2) &>/dev/null; then
        log_success "–≥–æ—Ç–æ–≤"
        break
    fi
    if [[ $i -eq 30 ]]; then
        log_error "—Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL"
        $COMPOSE_CMD logs db
        exit 1
    fi
    sleep 2
    echo -n "."
done

echo -n "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: "
for i in {1..60}; do
    if curl -s -o /dev/null http://localhost:3000 2>/dev/null; then
        log_success "–≥–æ—Ç–æ–≤–æ"
        break
    fi
    if [[ $i -eq 60 ]]; then
        log_error "—Ç–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
        $COMPOSE_CMD logs app
        exit 1
    fi
    sleep 2
    echo -n "."
done

echo -n "Caddy: "
for i in {1..30}; do
    if curl -s -o /dev/null http://localhost 2>/dev/null; then
        log_success "–≥–æ—Ç–æ–≤"
        break
    fi
    if [[ $i -eq 30 ]]; then
        log_error "—Ç–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Caddy"
        $COMPOSE_CMD logs caddy
        exit 1
    fi
    sleep 2
    echo -n "."
done

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log_info "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
$COMPOSE_CMD ps

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
echo ""
log_success "üéâ CrystallBudget —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!"
echo ""
echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:"
echo "  üåê Web: http://$SERVER_IP (–∏–ª–∏ https://$CURRENT_HOSTNAME –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
echo "  üë§ –î–µ–º–æ: demo@crystall.local / demo1234"
echo ""
echo "‚öôÔ∏è  –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  –õ–æ–≥–∏:           $COMPOSE_CMD logs -f"
echo "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:     $COMPOSE_CMD restart"
echo "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:      $COMPOSE_CMD down"
echo "  –°—Ç–∞—Ç—É—Å:         $COMPOSE_CMD ps"
echo ""
echo "üîß –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏:"
echo "  1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
echo "  2. –í–æ–π–¥–∏—Ç–µ —Å –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π"
echo "  3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PWA (–∫–Ω–æ–ø–∫–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)"
echo "  4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—é–¥–∂–µ—Ç"
echo ""

if [ "$CURRENT_HOSTNAME" ]; then
    log_info "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ PWA –æ—Ç–∫—Ä–æ–π—Ç–µ: https://$CURRENT_HOSTNAME"
    log_warning "HTTPS –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"
fi