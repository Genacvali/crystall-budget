#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è CrystalBudget - —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import os
import sqlite3
import secrets
import string
from datetime import datetime, timedelta
import asyncio
import logging
from typing import Optional

try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
    from werkzeug.security import generate_password_hash
except ImportError:
    print("‚ùå –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å python-telegram-bot:")
    print("pip install python-telegram-bot")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
DB_PATH = os.environ.get("BUDGET_DB", "/var/lib/crystalbudget/budget.db")
WEB_URL = os.environ.get("WEB_URL", "https://crystalbudget.net")

if not BOT_TOKEN:
    print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
    exit(1)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
    
    def get_connection(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î"""
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row
        return conn
    
    def find_user_by_email(self, email: str) -> Optional[dict]:
        """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
        conn = self.get_connection()
        try:
            cursor = conn.execute(
                "SELECT id, email, name FROM users WHERE email = ?", 
                (email.lower(),)
            )
            row = cursor.fetchone()
            return dict(row) if row else None
        finally:
            conn.close()
    
    def get_user_telegram(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∏—Ç—å Telegram —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self.get_connection()
        try:
            cursor = conn.execute(
                "SELECT * FROM user_telegram WHERE user_id = ?", 
                (user_id,)
            )
            row = cursor.fetchone()
            return dict(row) if row else None
        finally:
            conn.close()
    
    def link_telegram(self, user_id: int, telegram_id: str, telegram_data: dict):
        """–°–≤—è–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram"""
        conn = self.get_connection()
        try:
            conn.execute("""
                INSERT OR REPLACE INTO user_telegram 
                (user_id, telegram_id, telegram_username, telegram_first_name, 
                 telegram_last_name, is_verified, verified_at)
                VALUES (?, ?, ?, ?, ?, 1, CURRENT_TIMESTAMP)
            """, (
                user_id, telegram_id, 
                telegram_data.get('username'),
                telegram_data.get('first_name'),
                telegram_data.get('last_name')
            ))
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error linking telegram: {e}")
            return False
        finally:
            conn.close()
    
    def create_password_reset_token(self, user_id: int) -> str:
        """–°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
        token = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(32))
        expires_at = datetime.now() + timedelta(hours=1)  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å
        
        conn = self.get_connection()
        try:
            conn.execute("""
                INSERT INTO password_reset_tokens 
                (user_id, token, expires_at)
                VALUES (?, ?, ?)
            """, (user_id, token, expires_at.isoformat()))
            conn.commit()
            return token
        finally:
            conn.close()
    
    def reset_password_with_token(self, token: str, new_password: str) -> bool:
        """–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ —Ç–æ–∫–µ–Ω—É"""
        conn = self.get_connection()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
            cursor = conn.execute("""
                SELECT user_id FROM password_reset_tokens 
                WHERE token = ? AND expires_at > ? AND used = 0
            """, (token, datetime.now().isoformat()))
            
            row = cursor.fetchone()
            if not row:
                return False
            
            user_id = row['user_id']
            password_hash = generate_password_hash(new_password)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            conn.execute(
                "UPDATE users SET password_hash = ? WHERE id = ?",
                (password_hash, user_id)
            )
            
            # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            conn.execute(
                "UPDATE password_reset_tokens SET used = 1 WHERE token = ?",
                (token,)
            )
            
            conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error resetting password: {e}")
            return False
        finally:
            conn.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
db = DatabaseManager(DB_PATH)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"üîê –Ø –±–æ—Ç CrystalBudget –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.\n\n"
        f"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"/link - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å Telegram\n"
        f"/reset - —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
        f"/help - –ø–æ–º–æ—â—å"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "üÜò **–ü–æ–º–æ—â—å CrystalBudget Bot**\n\n"
        "üîó **/link** - —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç CrystalBudget —Å Telegram\n"
        "üîê **/reset** - —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å (–Ω—É–∂–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–≤—è–∑–∫–∞)\n"
        "‚ùì **/help** - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        f"üåê –°–∞–π—Ç: {WEB_URL}\n"
        "üìß –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support",
        parse_mode='Markdown'
    )

async def link_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /link –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    telegram_id = str(update.effective_user.id)
    
    await update.message.reply_text(
        "üîó **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å Telegram**\n\n"
        "üìß –í–≤–µ–¥–∏—Ç–µ email –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ CrystalBudget:",
        parse_mode='Markdown'
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sessions[telegram_id] = {'state': 'waiting_email'}

async def reset_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è"""
    telegram_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    conn = db.get_connection()
    try:
        cursor = conn.execute("""
            SELECT u.id, u.email, u.name 
            FROM users u
            JOIN user_telegram ut ON u.id = ut.user_id
            WHERE ut.telegram_id = ? AND ut.is_verified = 1
        """, (telegram_id,))
        
        user = cursor.fetchone()
        if not user:
            await update.message.reply_text(
                "‚ùå **–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–≤—è–∑–∞–Ω**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∫–æ–º–∞–Ω–¥–æ–π /link",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
        token = db.create_password_reset_token(user['id'])
        reset_url = f"{WEB_URL}/reset-password?token={token}"
        
        keyboard = [[InlineKeyboardButton("üîê –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å", url=reset_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üîê **–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è**\n\n"
            f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {user['email']}\n"
            f"‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    finally:
        conn.close()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    telegram_id = str(update.effective_user.id)
    text = update.message.text
    
    if telegram_id not in user_sessions:
        await update.message.reply_text(
            "‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å\n"
            "/link - —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n" 
            "/reset - —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å"
        )
        return
    
    session = user_sessions[telegram_id]
    
    if session['state'] == 'waiting_email':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email
        user = db.find_user_by_email(text)
        if not user:
            await update.message.reply_text(
                "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ",
                parse_mode='Markdown'
            )
            del user_sessions[telegram_id]
            return
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        telegram_data = {
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name
        }
        
        if db.link_telegram(user['id'], telegram_id, telegram_data):
            await update.message.reply_text(
                f"‚úÖ **–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω!**\n\n"
                f"üë§ {user['name']} ({user['email']})\n"
                f"üì± Telegram: @{update.effective_user.username or '–±–µ–∑ username'}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è**\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                parse_mode='Markdown'
            )
        
        del user_sessions[telegram_id]

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print(f"ü§ñ –ó–∞–ø—É—Å–∫ CrystalBudget Telegram Bot...")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")
    print(f"üåê –í–µ–±-—Å–∞–π—Ç: {WEB_URL}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("link", link_account))
    application.add_handler(CommandHandler("reset", reset_password))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()